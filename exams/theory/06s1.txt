Q1. Quicksort has a worst case of O(n log n)

Q2. D

Q3. An abstract data type is a data type whose implementation is hidden, allowing users to execute operations using only function outlined in its interface. 

- Users don't need to worry implementation details
- Type and it's operations can be reused (ie. provides better code modularity)


Q4. strcpy requires you to malloc space before copying into it.

Q5. C. Quicksort will usually be better than insertion sort as the average case complexity for quick sort is O(n log n) and for insertion sort it's O(n^2)

Q7.

i) Stack.h

typedef struct stack *Stack;

// Creates a new queue
Stack stackNew();

// Returns true if the queue is empty
bool isEmptyStack(Stack stack);

// Adds an item to the queue
void push(Stack stack, int item);

// Removes the last item from the queue
void pop(Stack stack);

ii) Stack.c

#define MAX_SIZE 100

typedef struct stack {
  int items[MAX_SIZE];
  int top;
} stack;

Stack stackNew ()
{
  Stack new = malloc(sizeof *new);
  new->top = 0;
  return new;
}

bool isEmpty (Stack stack)
{
  return stack->top == 0;
}

void push (Stack stack, int item)
{
  stack->items[stack->top++] = item;
}

void pop (Stack stack)
{
  stack->top--;
}


ii)  Queue.h

typedef struct queue *Queue;

// Creates a new queue
Queue newQueue();

// Deletes a queue
void dropQueue(Queue queue);

// Returns and removes the first item in the queue
int head(Queue queue);

// Adds an item to the queue
void enQueue(Queue queue, int item);

// Returns true if the queue is empty
bool isEmptyQueue(Queue queue);


Q8) 

i) Reverse a stack

// Strategy: Push items into a temporary queue, and then repush items 
// to original stack (should be in reverse order).
#include "queue.h"
#include "stack.h"

void reverseStack(Stack stack)
{
  Queue tmp = newQueue();

  // push all items onto temporary stack
  for (; !isEmptyStack(stack); )
    enQueue(tmp, pop(stack));

  // repush items back into old stack
  for (; !isEmptyQueue(tmp); )
    push(stack, deQueue(tmp));
  
  dropQueue(tmp);
}

ii) Reverse a queue

// Strategy: push queue items into a stack and requeue items
